name: repos

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  update:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gerar lista de repositórios
        id: gen
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const username = 'alancampos-ai';
            const per_page = 100;
            let page = 1, repos = [];
            while (true) {
              const { data } = await github.rest.repos.listForUser({
                username, per_page, page, type: 'owner', sort: 'updated'
              });
              if (!data.length) break;
              repos.push(...data);
              page++;
            }
            repos = repos.filter(r => !r.fork);
            repos.sort((a,b) => new Date(b.pushed_at) - new Date(a.pushed_at));
            const lines = repos.map(r =>
              `- [${r.name}](${r.html_url}) — ${r.description ? r.description.replace(/\r?\n/g,' ') : 'sem descrição'} · ${r.language ?? '—'} · ⭐ ${r.stargazers_count}`
            );
            return lines.join('\n');

      - name: Inserir no README entre marcadores
        uses: actions/github-script@v7
        env:
          REPO_LIST: ${{ steps.gen.outputs.result }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const path = 'README.md';
            const start = '<!--REPO-LIST:START-->';
            const end = '<!--REPO-LIST:END-->';
            const { data:file } = await github.rest.repos.getContent({ owner, repo, path });
            const content = Buffer.from(file.content, 'base64').toString();
            const pattern = new RegExp(`${start}[\\s\\S]*?${end}`);
            const replacement = `${start}\n${process.env.REPO_LIST}\n${end}`;
            const next = content.match(pattern) ? content.replace(pattern, replacement)
                                                : content + `\n\n${replacement}\n`;
            if (next !== content) {
              await github.rest.repos.createOrUpdateFileContents({
                owner, repo, path,
                message: 'chore: atualizar lista de repositórios [skip ci]',
                content: Buffer.from(next).toString('base64'),
                sha: file.sha
              });
            }
